buildscript {
    ext.kotlin_version = '1.3.21' // Required for Kotlin integration
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version" // Required for Kotlin integration
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version" // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.19"
    }
}

apply plugin: "kotlin" // Required for Kotlin integration
apply plugin: "jacoco"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "application"

mainClassName = "de.unia.se.mdd.Main"
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jar {
    baseName = "se13-mdd-team"
    version = "0.1.0"
    manifest {
        attributes "Main-Class": "de.unia.se.mdd.MainKt"
    }
}

sourceSets{
    main.java.srcDirs += "src/main/kotlin/"
    test.java.srcDirs += "src/test/kotlin/"
}

repositories {
    jcenter()
    google()
    mavenCentral()
}

configurations {
    ktlint
}

test {
    useJUnitPlatform()

    afterTest { desc, result ->
        logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.15.0"

    implementation project(":plantuml")

    testImplementation "io.kotlintest:kotlintest-runner-junit5:3.1.7"
    testImplementation "io.mockk:mockk:1.8.9"

    ktlint "com.github.shyiko:ktlint:0.29.0"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    // To generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

// To run coverage verification during the build (and fail when appropriate)
check.dependsOn jacocoTestCoverageVerification
// To run ktlint during the build (and fail when appropriate)
check.dependsOn ktlint
