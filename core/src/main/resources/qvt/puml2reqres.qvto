modeltype puml "strict" uses puml('http://www.eclipse.plantuml/Puml');
modeltype reqres "strict" uses RequestResponsePairs('http://www.example.org/RequestResponsePairs');

configuration property diagramName : String;

transformation puml2reqres(in input: puml, out output: reqres);

main() {
    log('Started transforming PlantUML to RequestResponse pairs');
    log(diagramName);

    assert fatal ( input.objectsOfType(UmlDiagram).umlDiagrams[SequenceUml]->size() = 1 )
        with log('Input does not contain exactly one SequenceDiagram');

     input.objectsOfType(UmlDiagram).umlDiagrams[SequenceUml].map transformUmlDiagram();
}

mapping SequenceUml::transformUmlDiagram(): Scenario {
    scenarioName := diagramName;
    var roundtripId : Integer := 1;
    var umlUses := self.umlElements[UmlUse];
    var umlUsesSize : Integer := umlUses->size();
    var umlUsesIndex : Integer := 1;
    var httpRequestElement : HttpRequest;
    var httpResponseElement : HttpResponse;
    while (umlUsesIndex <= umlUsesSize) {
        var message : UmlUse := umlUses->at(umlUsesIndex);
        if (message.associationArrow = AssociationType::DIRECTIONALRIGHT) {
            httpRequestElement := message.umlUse2httpRequest();
            umlUsesIndex := umlUsesIndex + 1;
        };
        message := umlUses->at(umlUsesIndex);
        if (message.associationArrow = AssociationType::DIRECTIONALRIGHT) {
            httpResponseElement := message.umlUse2httpResponse();
            umlUsesIndex := umlUsesIndex + 1;
        };
        var roundtripElement : Roundtrip = new Roundtrip();
        roundtripElement.roundtripName := "roundtrip"+roundtripId.toString();
        roundtripElement.httprequest := httpRequestElement;
        roundtripElement.httpresponse := httpResponseElement;
        roundtrip += roundtripElement;
        roundtripId := roundtripId + 1;
    }
}

mapping UmlUse::umlUse2httpRequest(): HttpRequest {
    httpMethod := "GET"; // TODO
    url := "/test"; // TODO
    // httpRequestDatum += "testDatum1"; // TODO
    // httpRequestDatum += "testDatum2"; // TODO
    receiver := "testReceiver"; // TODO
}

mapping UmlUse::umlUse2httpResponse(): HttpResponse {
    // TODO
}
