modeltype reqres "strict" uses RequestResponsePairs('http://www.example.org/RequestResponsePairs');
modeltype restassured "strict" uses RestAssured('http://www.example.org/RestAssured');
modeltype Ecore "strict" uses 'http://www.eclipse.org/emf/2002/Ecore';

transformation reqres2restassured(in input: reqres, out output: restassured);

main() {
    log('Started transforming RequestResponse pairs to RestAssured');

    assert fatal ( input.rootObjects()[Scenario]->size() = 1 )
                with log('Input does not contain exactly one Scenario');

    input.rootObjects()[Scenario].map scenario2testScenario();
}

mapping Scenario::scenario2testScenario(): TestScenario {
    log('Transforming Scenario to TestScenario');

    name := "$testScenario";
    parameter := object Parameter {
                         type := "$paramType";
                         name := "$paramName";
                     };
    testroundtrip := self.response -> map response2testRoundtrip();
}

mapping Response::response2testRoundtrip(): TestRoundtrip {
    log('Transforming Response to TestRoundtrip');

    requestspecification := self.requestresponse.map request2RequestSpecification();
    assertresponse := object ResponseSpecification {
        bodyMatchers := object BodyMatcherGroup {
                bodyMatchers := self.assertbody -> map bodyExpectation2bodyMatcher();
            };

        expectedStatusCode := self.assertstatus.map statusExpectation2isIn();
    }
}

mapping Request::request2RequestSpecification(): RequestSpecification{
    log('Transforming Request to RequestSpecification');

    method := self.method;
    path := pathQuery(self.url);
    authenticationScheme := object BasicAuthScheme {
        user := "$user";
        password := "$password";
    };

    requestParameters := self.parameter -> map requestParam2requestParameter();
}

query pathQuery( url: URL) : String {
    log('Query path of URL');

    return url.path;
}

mapping RequestParam::requestParam2requestParameter() : RequestParameter {
    log('Transforming RequestParam to RequestParameter');

     value := self.value;
     key := self.key;
}

mapping BodyExpectations::bodyExpectation2bodyMatcher(): BodyMatcher{
    log('Transforming BodyExpectation to BodyMatcher');

    matcher := (self.paramexistsexpectation.map paramExistsExpectation2hasXpath()) -> first();
}

mapping ParamExistsExpectation::paramExistsExpectation2hasXpath(): HasXPath{
    log('Transforming ParamExistsExpectation to HasXPath');

    pathString := self.jsonPath;
}

mapping StatusExpectation::statusExpectation2isIn(): IsIn{
    log('Transforming StatusExpectation to IsIn');

    allowedValues := self.allowedStatusCodes;
}
