modeltype reqres "strict" uses RequestResponsePairs('http://www.example.org/RequestResponsePairs');
modeltype restassured "strict" uses RestAssured('http://www.example.org/RestAssured');

transformation reqres2restassured(in input: reqres, out output: restassured);

main() {
    log('Started transforming RequestResponse pairs to RestAssured');

    assert fatal ( input.rootObjects()[Scenario]->size() = 1 )
                with log('Input does not contain exactly one Scenario');

    input.rootObjects()[Scenario].map scenario2testScenario();
}

mapping Scenario::scenario2testScenario(): TestScenario {
     name := "$scenarioName";
     testroundtrip := self.roundtrip -> map roundtrip2testRoundtrip();
     parameter := object Parameter {
        type := "$parameterType";
        name := "$parameterName";
     }
}

mapping Roundtrip::roundtrip2testRoundtrip(): TestRoundtrip {
     log('Transforming Roundtrip to TestRooundtrip');

     name := "$testRoundtripName";
     requestspecification :=  self.request .map request2requestSpecification();
     assertresponse := self.response .map response2responseSpecification();
}

mapping Request::request2requestSpecification(): RequestSpecification {
    log('Transforming Request to RequestSpecification');

    if (self.method.toString() = "POST") then {
        method := RestAssured::Method::POST;
     } endif;
    if (self.method.toString() = "PUT") then {
        method := RestAssured::Method::PUT;
     } endif;
     //method is not set if it is "GET", as get is the default

    path := pathQuery(self.url);
}

mapping Response::response2responseSpecification(): ResponseSpecification {
     log('Transforming Responne to ResponseSpecification');
}

query pathQuery( url: URL) : String {
    log('Query path of URL');

    return url.path;
}
