[comment encoding = UTF-8 /]
[module generateCode('http://www.example.org/RestAssured')]

[template public generateTestScenario(testScenario : TestScenario)]
[comment @main /]
[file (testScenario.testScenarioName.concat('.java'), false, 'UTF-8')]
package com.mdd.test;

import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.hamcrest.collection.IsIn;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.apache.commons.text.StringSubstitutor;
import com.moandjiezana.toml.Toml;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

public class Test {

    Map<String, Object> paramsMap = new HashMap();
    ScriptEngine engine;
    StringSubstitutor substitutor;
	private static final boolean IS_WINDOWS = System.getProperty( "os.name" ).contains( "indow" );

    public Test(String configFile) {
        try {
			String osAppropriatePath = IS_WINDOWS ? configFile.substring(1) : configFile;
			Path path = Paths.get(osAppropriatePath);
			String paramsFileContent = new String(Files.readAllBytes(path));
			paramsMap = new Toml().read(paramsFileContent).toMap();
            substitutor = new StringSubstitutor(paramsMap);
            ScriptEngineManager factory = new ScriptEngineManager();
            ScriptEngine engine = factory.getEngineByName("JavaScript");
            test();
		} catch(Exception e) {
            System.out.println("Could not read TOML config file");
			System.out.println("Stack trace: " + e);
        }
    }

	public void test() {
	[for (testRoundtrip : TestRoundtrip | testScenario.testroundtrip) separator('\n\n') ]
		[if (testRoundtrip.precondition->isEmpty())][testRoundtrip.generateTestRoundtrip()/][/if]
		[if (testRoundtrip.precondition->notEmpty())]
		try {
        	String evaluatableAltConditionString = substitutor.replace("[testRoundtrip.precondition.replaceAll('"', '\\\\"')/]");
        	Boolean evaluatedCondition = (Boolean) engine.eval(evaluatableAltConditionString);
			if(evaluatedCondition) {
				[testRoundtrip.generateTestRoundtrip()/]
			}
		} catch (ScriptException e) {
			System.out.println("Error during evaluation the alternative Condition");
			System.out.println("Stack trace: " + e);
		}
		[/if]		
	[/for]
	}
}
[/file]
[/template]

[template private generateTestRoundtrip(testRoundtrip : TestRoundtrip) post(trim())]
Response [testRoundtrip.testRoundtripName/] = RestAssured.given()
   		[testRoundtrip.requestspecification.generateGivenPart()/]
	.when()
		[testRoundtrip.requestspecification.generateWhenPart()/]
	.then()
		[testRoundtrip.responsespecification.generateThenPart()/];
[if (testRoundtrip.responsespecification.responsedatum->notEmpty())]

[testRoundtrip.generateExtractions()/]
[/if]
[/template]

[template private generateGivenPart(requestSpecification : RequestSpecification) post(trim())]
.auth().basic(substitutor.replace("[requestSpecification.receiver/].username"), substitutor.replace("[requestSpecification.receiver/].password"))
[if (requestSpecification.requestDatum->notEmpty())][for (rd : String | requestSpecification.requestDatum)].param("[rd/]", substitutor.replace("[rd/]"))[/for][/if]
[/template]

[template private generateWhenPart(requestSpecification : RequestSpecification) post(trim())]
.[requestSpecification.method.toLower()/](substitutor.replace("[requestSpecification.receiver/]") + substitutor.replace("[requestSpecification.url/]"))
[/template]

[template private generateThenPart(responseSpecification : ResponseSpecification) post(trim())]
.assertThat()
[responseSpecification.generateExpectStatusCode()/][if (responseSpecification.bodymatchergroup->notEmpty())][responseSpecification.generateExpectations()/][/if][if (responseSpecification.responsedatum->notEmpty())]	.and().extract().response()[/if]
[/template]

[template private generateExpectStatusCode(responseSpecification : ResponseSpecification) post(trim())]
[if (responseSpecification.statusmatcher->notEmpty())][if (responseSpecification.statusmatcher.oclIsTypeOf(IsIn))][let statusCode : IsIn = responseSpecification.statusmatcher.oclAsType(IsIn)]
.statusCode(IsIn.isIn(Arrays.asList([for (val : String | statusCode.value) separator (', ')][val/][/for])))
[/let][/if][/if]
[/template]

[template private generateExpectations(responseSpecification : ResponseSpecification) post(trim())]
[for (matcher : BodyMatcher | responseSpecification.bodymatchergroup)]
[if (matcher.oclIsTypeOf(HasXPath))][let bodyXPath : HasXPath = matcher.oclAsType(HasXPath)].body(hasXPath([bodyXPath.xPath/]))[/let][/if]
[if (matcher.oclIsTypeOf(IsIn))][let bodyIsIn : IsIn = matcher.oclAsType(IsIn)]// Todo: is this needed?[/let][/if]
[/for]
[/template]

[template private generateExtractions(testRoundtrip : TestRoundtrip) post(trim())]
[for (responseDatum : ResponseDatum | testRoundtrip.responsespecification.responsedatum)]
paramsMap.put("[responseDatum.responseDatumName/]", [testRoundtrip.testRoundtripName/].path("[responseDatum.responseDatumXPath/]"));
[/for]
[/template]
