[comment encoding = UTF-8 /]
[module generateCode('http://www.example.org/RestAssured')]

[template public generateTestScenario(testScenario : TestScenario)]
[comment @main /]
[file (testScenario.testScenarioName.concat('.java'), false, 'UTF-8')]
package com.mdd.test;

import java.util.Map;
import java.util.HashMap;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.apache.commons.text.StringSubstitutor;
import com.moandjiezana.toml.Toml;
import io.restassured.RestAssured;
import io.restassured.response.ValidatableResponse;

public class Test {

    Map<String, Object> paramsMap = new HashMap();
    StringSubstitutor substitutor;
	private static final boolean IS_WINDOWS = System.getProperty( "os.name" ).contains( "indow" );

    public Test(String configFile) {
        try {
			String osAppropriatePath = IS_WINDOWS ? configFile.substring(1) : configFile;
			Path path = Paths.get(osAppropriatePath);
			String paramsFileContent = new String(Files.readAllBytes(path));
			paramsMap = new Toml().read(paramsFileContent).toMap();
            substitutor = new StringSubstitutor(paramsMap);
            test();
		} catch(Exception e) {
            System.out.println("Could not read TOML config file");
			System.out.println("Stack trace: " + e);
        }
    }

	public void test() {
	[for (testRoundtrip : TestRoundtrip | testScenario.testroundtrip) separator('\n\n') ]
		[if (testRoundtrip.precondition->isEmpty())][testRoundtrip.generateTestRoundtrip()/][/if]
		[if (testRoundtrip.precondition->notEmpty())]
		if([testRoundtrip.precondition/]) {
			[testRoundtrip.generateTestRoundtrip()/]
		}		
		[/if]		
	[/for]
	}
}
[/file]
[/template]

[template private generateTestRoundtrip(testRoundtrip : TestRoundtrip) ]
ValidatableResponse [testRoundtrip.testRoundtripName/] = RestAssured.given()
   		[testRoundtrip.requestspecification.generateGivenPart()/]
	.when()
		[testRoundtrip.requestspecification.generateWhenPart()/]
	.then()
		[testRoundtrip.responsespecification.generateThenPart()/];
[if (testRoundtrip.responsespecification.responsedatum->notEmpty())]

[testRoundtrip.responsespecification.generateExtractions()/]
[/if]
[/template]

[template private generateGivenPart(requestSpecification : RequestSpecification)]
.auth().basic(substitutor.replace("[requestSpecification.receiver/].username"), substitutor.replace("[requestSpecification.receiver/].password"))
[if (requestSpecification.requestDatum->notEmpty())]
[for (rd : String | requestSpecification.requestDatum)]
.param([rd/], [rd/])
[/for]
[/if]
[/template]

[template private generateWhenPart(requestSpecification : RequestSpecification)]
.[requestSpecification.method.toLower()/](substitutor.replace("[requestSpecification.url/]"))
[/template]

[template private generateThenPart(responseSpecification : ResponseSpecification)]
.assertThat()
[responseSpecification.generateExpectStatusCode()/]
[if (responseSpecification.bodymatchergroup->notEmpty())]
[responseSpecification.generateExpectations()/]
[/if]
[if (responseSpecification.responsedatum->notEmpty())]
	.and().extract().response()
[/if]
[/template]

[template private generateExpectStatusCode(responseSpecification : ResponseSpecification)]
[if (responseSpecification.statusmatcher->notEmpty())]
[if (responseSpecification.statusmatcher.oclIsTypeOf(IsIn))]
[let statusCode : IsIn = responseSpecification.statusmatcher.oclAsType(IsIn)]
	.statusCode(in([for (val : String | statusCode.value) separator (', ')][val/])[/for]
[/let]
[/if]
[/if]
[/template]

[template private generateExpectations(responseSpecification : ResponseSpecification)]
[for (matcher : BodyMatcher | responseSpecification.bodymatchergroup)]
[if (matcher.oclIsTypeOf(HasXPath))]
[let bodyXPath : HasXPath = matcher.oclAsType(HasXPath)]
	.body(hasXPath([bodyXPath.xPath/]))
[/let]
[/if]
[if (matcher.oclIsTypeOf(IsIn))]
[let bodyIsIn : IsIn = matcher.oclAsType(IsIn)]
	// Todo: is this needed?
[/let]
[/if]
[/for]
[/template]

[template private generateExtractions(responseSpecification : ResponseSpecification)]
[for (responseDatum : ResponseDatum | responseSpecification.responsedatum)]
	String [responseDatum.responseDatumName/] = [responseDatum.responseDatumName/].path("[responseDatum.responseDatumXPath/]");
[/for]
[/template]
